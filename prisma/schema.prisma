generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  email       String       @unique
  password    String
  name        String?
  roles       UserRole[] // Explicit relation to roles via UserRole table
  leaves      Leave[]
  salaries    Salary[]
  attendances Attendance[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Role Model
model Role {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String           @unique
  description String?
  permissions RolePermission[] // Explicit relation to permissions via RolePermission table
  users       UserRole[] // Explicit relation to users via UserRole table
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

// Permission Model
model Permission {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String           @unique
  description String?
  roles       RolePermission[] // Explicit relation to roles via RolePermission table
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

// Join Table: User-Role Relationship
model UserRole {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  roleId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId]) // Ensure uniqueness of the combination
}

// Join Table: Role-Permission Relationship
model RolePermission {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  roleId       String @db.ObjectId
  permissionId String @db.ObjectId

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId]) // Ensure uniqueness of the combination
}

//route role
model RouteRole {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  route     String   @unique // The route path (e.g., "/salary/all")
  roles     String[] // List of roles allowed to access the route
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Leave Model
model Leave {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  reason     String
  status     LeaveStatus @default(PENDING)
  approvedBy String?     @db.ObjectId // ID of the user who approved/rejected the leave
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

// Salary Model
model Salary {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  amount    Float
  month     String // e.g., "January", "February"
  year      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// Attendance Model
model Attendance {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  date      DateTime
  status    AttendanceStatus @default(PRESENT)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LEAVE
}
