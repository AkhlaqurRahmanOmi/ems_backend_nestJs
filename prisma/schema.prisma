generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  password    String
  name        String?
  phoneNumber String?
  address     String?
  role        Role     @relation(fields: [roleId], references: [id])
  roleId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Leave      Leave[]
  UserRole   UserRole[]
  Salary     Salary[]
  Attendance Attendance[]
}

// Role Model
model Role {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String           @unique
  description     String?
  allocatedLeaves Int              @default(0) // Number of leaves allocated to users with this role
  permissions     RolePermission[] // Many-to-many relationship with Permission
  users           UserRole[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  User User[]
}

// Permission Model
model Permission {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  name        String           @unique
  description String?
  roles       RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

// Join Table: User-Role Relationship
model UserRole {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  roleId String @db.ObjectId

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId]) // Ensure uniqueness of the combination
}

// Join Table: Role-Permission Relationship
model RolePermission {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  roleId       String     @db.ObjectId
  permissionId String     @db.ObjectId
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

// Route-Role Mapping
model RouteRole {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  route     String   @unique // The route path (e.g., "/salary/all")
  roles     String[] // List of roles allowed to access the route
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Leave Model
model Leave {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  type       LeaveType // Type of leave (e.g., CASUAL, SICK, EARNED)
  startDate  DateTime
  endDate    DateTime
  reason     String
  status     LeaveStatus @default(PENDING)
  approvedBy String?     @db.ObjectId // ID of the user who approved/rejected the leave
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum LeaveType {
  CASUAL
  SICK
  EARNED
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

// Salary Model
model Salary {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  amount     Float // Base salary
  deductions Float? // Total deductions (e.g., for excess leaves)
  netSalary  Float? // Net salary after deductions
  month      String // Month (e.g., "January")
  year       Int // Year (e.g., 2023)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum Month {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}

// Attendance Model
model Attendance {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  userId        String           @db.ObjectId
  date          DateTime
  status        AttendanceStatus @default(PRESENT)
  loginTime     DateTime         @default(now())
  logoutTime    DateTime?
  isLate        Boolean? // Flag to indicate if the user was late
  isEarlyLogout Boolean? // Flag to indicate if the user logged out early
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LEAVE
}
